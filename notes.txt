create flow of the whole resturant partner app / user app / admin panel and then decide what all apis are needed


send data as form data and not in body ---> not required if using https
add validations
status codes and their respective messages
rate limiting ---> to limit the number of login apis
middleware to check token is present or not for authorization

should we have same db for both rest partner app, admin panel and user app??? -----> yes

user should be able to add address under different labels like -> home, work, other etc.


https://www.linkedin.com/pulse/system-design-architecture-food-delivery-app-like-durgesh-sharma-tdhec/


(●'◡'●)uploading images to cloudinary using multer(●'◡'●)

takes images from user using multer, 
save them on local server (this is not mandatory but a good practice)
upload them to cloudinary
remove the file from local server once it is uploaded successfully on cloudinary



register restaurant only when isRestPartner is true
one user should be able to add only one restaurant -> and many outlets


helmet.js to protect headers

https://medium.com/@sandeepkella23/why-you-should-avoid-base64-for-image-conversion-in-apis-c8d77830bfd8

we can do this in multer --> 
const limits = {
    fileSize: 5 * 1024 * 1024, // Limit file size to 5 MB
    files: 3 // Limit number of files per request
  }

  also we can add a rate limiter of max 20req at a time and then block for 10mins 


  // add pagination while fetching all restaurants
  // Use .select() to avoid fetching unnecessary fields (like verification docs). like .select("-verificationDetails") --> remove "verificationDetails"


// user will place an order (place-order-api) ----> rest will be notified (orders will be filtered on the basis of rest and outlet)
// user will be allowed to cancel the order within 10mins of placing & change the address within 20mins of placing (different apis for both)

// order payment (payment-api) (will have separate model)


// we need cart apis also


// either use middleware (pre('save')) or calculate in controller before saving.
// functionality to upload all the menu-items data through a csv, along with the csv as well
  -> steps:
  Send a .csv file via a multipart/form-data POST request.
  Use the multer middleware to accept the file.
  Upload the CSV file using multer.
  Use csv-parser to read the file.
  Loop through the data rows and save to DB.



fs.createReadStream(filePath).pipe(csv())
“Take the CSV file you're reading, and pipe its contents into the csv() parser so each line becomes a JavaScript object.”


fs.createReadStream() reads the file in chunks (efficient for large files).
csv() is a transform stream that converts each chunk into parsed CSV rows.
.pipe(csv()) connects these two streams.

How .pipe() Works
[Readable Stream] --> [Transform Stream] --> [Writable Stream]

//uses -> read a csv and insert data into db
-> compress a file
-> serve a large file (like video)
-> resize an image


.on("data")
.on("end")
these are events


socket.io for real time updates like   
  -> updating the rest when user places an order
  -> updating delivery guy when the order is to be picked up


verify restaurant api to be made

how do no reply email works


🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸🌸

to-do
-> validate user detail fields (email, pass, name etc)
-> validate rest detail fields


-> search bar api-> recently search (4 items/ restaurants)


-> give cuisine options when user fills in the cuisines (as per the categories give options and allow the user to choose from those options)